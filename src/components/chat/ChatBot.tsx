import React, { useState, useRef, useEffect } from 'react';
import { X, Send, MessageCircle, Bot, User, Loader2 } from 'lucide-react';
import { groqService } from '../../services/groqService';
import { courseService } from '../../services/courseService';
import { Button } from '../ui/button';
import { Card } from '../ui/card';
import './chatbot.css';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  courses?: any[];
}

interface ChatBotProps {
  className?: string;
}

export const ChatBot: React.FC<ChatBotProps> = ({ className = '' }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Ch√†o b·∫°n! T√¥i l√† EduBot ü§ñ - tr·ª£ l√Ω AI t∆∞ v·∫•n kh√≥a h·ªçc c·ªßa n·ªÅn t·∫£ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚úÖ T√¨m ki·∫øm kh√≥a h·ªçc ph√π h·ª£p\n‚úÖ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p\n‚úÖ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ c√°c kh√≥a h·ªçc\n\nB·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ lƒ©nh v·ª±c n√†o h√¥m nay?',
      sender: 'bot',
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showQuickQuestions, setShowQuickQuestions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickQuestions = [
    "G·ª£i √Ω kh√≥a h·ªçc ph√π h·ª£p cho t√¥i",
    "Kh√≥a h·ªçc l·∫≠p tr√¨nh n√†o t·ªët nh·∫•t?",
    "T√¥i mu·ªën h·ªçc v·ªÅ AI/Machine Learning",
    "Kh√≥a h·ªçc thi·∫øt k·∫ø UI/UX c√≥ g√¨ hay?",
    "H·ªçc marketing online ·ªü ƒë√¢u?"
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateChatResponse = async (userMessage: string): Promise<string> => {
    try {
      const prompt = `
B·∫°n l√† m·ªôt AI assistant chuy√™n t∆∞ v·∫•n kh√≥a h·ªçc tr·ª±c tuy·∫øn t√™n l√† "EduBot". H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch:

C√¢u h·ªèi ng∆∞·ªùi d√πng: "${userMessage}"

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
1. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp
2. T·ª± gi·ªõi thi·ªáu l√† EduBot - tr·ª£ l√Ω AI t∆∞ v·∫•n kh√≥a h·ªçc
3. N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ kh√≥a h·ªçc c·ª• th·ªÉ:
   - Gi·∫£i th√≠ch l·ª£i √≠ch c·ªßa kh√≥a h·ªçc ƒë√≥
   - ƒê·ªÅ xu·∫•t ƒë·ªëi t∆∞·ª£ng ph√π h·ª£p
   - G·ª£i √Ω c√°c kh√≥a h·ªçc li√™n quan
4. N·∫øu ƒë∆∞·ª£c h·ªèi "g·ª£i √Ω kh√≥a h·ªçc" ho·∫∑c "h·ªçc g√¨":
   - H·ªèi ng∆∞·ª£c v·ªÅ s·ªü th√≠ch/m·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng
   - ƒê∆∞a ra g·ª£i √Ω d·ª±a tr√™n c√°c lƒ©nh v·ª±c ph·ªï bi·∫øn
5. N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c (kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p):
   - L·ªãch s·ª± t·ª´ ch·ªëi v√† h∆∞·ªõng d·∫´n v·ªÅ c√°c ch·ªß ƒë·ªÅ kh√≥a h·ªçc
6. C√¢u tr·∫£ l·ªùi n√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (100-250 t·ª´)
7. K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán

Danh s√°ch kh√≥a h·ªçc hi·ªán c√≥:
üìö L·∫≠p tr√¨nh:
- React v√† TypeScript t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao
- JavaScript ES6+ v√† Modern Development

ü§ñ Khoa h·ªçc d·ªØ li·ªáu:
- Machine Learning cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu

üé® Thi·∫øt k·∫ø:
- UI/UX Design v·ªõi Figma

üìà Marketing:
- Digital Marketing v√† SEO to√†n di·ªán

üíº Kinh doanh:
- Qu·∫£n l√Ω kinh doanh v√† l√£nh ƒë·∫°o

‚òÅÔ∏è C√¥ng ngh·ªá:
- Cloud Computing v√† AWS
- Cybersecurity v√† An to√†n th√¥ng tin

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch!
`;

      const completion = await groqService.chatCompletion(prompt);
      return completion || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c kh√≥a h·ªçc ho·∫∑c lƒ©nh v·ª±c b·∫°n quan t√¢m kh√¥ng?';
    } catch (error) {
      console.error('Error generating chat response:', error);
      return 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. T√¥i l√† EduBot - tr·ª£ l√Ω AI t∆∞ v·∫•n kh√≥a h·ªçc. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c kh√≥a h·ªçc l·∫≠p tr√¨nh, thi·∫øt k·∫ø, marketing, hay b·∫•t k·ª≥ lƒ©nh v·ª±c n√†o b·∫°n quan t√¢m!';
    }
  };

  const handleSendMessage = async (message?: string) => {
    const messageText = message || inputText;
    if (!messageText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);
    setShowQuickQuestions(false);

    try {
      // Delay nh·ªè ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng typing
      await new Promise(resolve => setTimeout(resolve, 1000));

      const response = await generateChatResponse(messageText);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        sender: 'bot',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, botMessage]);

      // N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn g·ª£i √Ω kh√≥a h·ªçc, t·ª± ƒë·ªông g·ª£i √Ω
      if (messageText.toLowerCase().includes('g·ª£i √Ω') || 
          messageText.toLowerCase().includes('kh√≥a h·ªçc') || 
          messageText.toLowerCase().includes('h·ªçc g√¨')) {
        
        setTimeout(async () => {
          try {
            const aiRecommendations = await courseService.getAIRecommendations('default-user');
            if (aiRecommendations.success && aiRecommendations.data.length > 0) {            const courses = await courseService.getAllCourses();
            const recommendedCourses = courses.data.filter((course: any) => 
              aiRecommendations.data.some(rec => rec.courseId === course.id)
            ).slice(0, 3);

              if (recommendedCourses.length > 0) {
                const courseMessage: Message = {
                  id: (Date.now() + 2).toString(),
                  text: 'üìö D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë kh√≥a h·ªçc t√¥i g·ª£i √Ω cho b·∫°n:',
                  sender: 'bot',
                  timestamp: new Date(),
                  courses: recommendedCourses,
                };
                setMessages(prev => [...prev, courseMessage]);
              }
            }
          } catch (error) {
            console.error('Error fetching course recommendations:', error);
          }
        }, 1500);
      }
    } catch (error) {
      console.error('Error in chat:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        sender: 'bot',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickQuestion = (question: string) => {
    handleSendMessage(question);
  };

  const handleSendClick = () => {
    handleSendMessage();
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(price);
  };

  return (
    <div className={`chatbot-container ${className}`}>
      {/* Chat Toggle Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="chatbot-toggle h-14 w-14 rounded-full text-white shadow-lg transition-all duration-200"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <Card className="chatbot-window w-96 h-96 flex flex-col bg-white border-0">
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-t-lg">
            <div className="flex items-center space-x-2">
              <Bot className="h-5 w-5" />
              <span className="font-semibold">AI T∆∞ v·∫•n kh√≥a h·ªçc</span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="h-8 w-8 p-0 hover:bg-blue-600 text-white"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="chatbot-messages flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    {message.sender === 'bot' && (
                      <Bot className="h-4 w-4 mt-0.5 text-blue-500" />
                    )}
                    {message.sender === 'user' && (
                      <User className="h-4 w-4 mt-0.5 text-white" />
                    )}
                    <div className="flex-1">
                      <p className="text-sm leading-relaxed">{message.text}</p>
                      {message.courses && (
                        <div className="mt-3 space-y-2">
                          {message.courses.map((course) => (
                            <div
                              key={course.id}
                              className="course-card-hover bg-white p-3 rounded-lg border border-gray-200 text-gray-800 cursor-pointer"
                            >
                              <h4 className="font-semibold text-sm mb-1 text-blue-600">{course.title}</h4>
                              <p className="text-xs text-gray-600 mb-2">üë®‚Äçüè´ {course.instructor}</p>
                              <div className="flex justify-between items-center text-xs">
                                <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                  {course.level === 'beginner' ? 'C∆° b·∫£n' : 
                                   course.level === 'intermediate' ? 'Trung c·∫•p' : 'N√¢ng cao'}
                                </span>
                                <span className="font-semibold text-green-600">
                                  {formatPrice(course.price)}
                                </span>
                              </div>
                              <div className="mt-2 flex items-center text-xs text-gray-500">
                                <span>‚≠ê {course.rating}</span>
                                <span className="mx-1">‚Ä¢</span>
                                <span>{course.reviewCount} ƒë√°nh gi√°</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-gray-100 text-gray-800 max-w-[80%] p-3 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Bot className="h-4 w-4 text-blue-500" />
                    <div className="flex space-x-1 items-center">
                      <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
                      <span className="text-sm typing-animation">ƒêang so·∫°n tin...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          {showQuickQuestions && messages.length === 1 && (
            <div className="px-4 pb-2">
              <p className="text-xs text-gray-500 mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
              <div className="space-y-1">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickQuestion(question)}
                    className="w-full text-left text-xs px-3 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg transition-colors"
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-4 border-t border-gray-200 bg-gray-50">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ kh√≥a h·ªçc..."
                className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={isTyping}
              />
              <Button
                onClick={handleSendClick}
                disabled={!inputText.trim() || isTyping}
                className="px-3 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white rounded-lg transition-colors"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};

export default ChatBot;
