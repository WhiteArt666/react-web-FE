import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Course } from '../types';
import { useCourseDetail } from '../hooks/useCourseDetail';
import { useAuth } from '../contexts/AuthContext';
import { useFavorites } from '../contexts/FavoritesContext';
import { courseService } from '../services/courseService';
import { formatPrice, formatDuration } from '../lib/utils';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Button } from '../components/ui/button';
import LoadingSpinner from '../components/common/LoadingSpinner';
import { 
  ArrowLeft, 
  Heart, 
  Clock, 
  Star, 
  User, 
  BookOpen, 
  Play,
  Download,
  Share2,
  Award,
  CheckCircle,
  Users,
  Globe,
  Calendar
} from 'lucide-react';

const CourseDetailPage: React.FC = () => {
  const { courseId } = useParams<{ courseId: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const { addToFavorites, removeFromFavorites, isFavorite } = useFavorites();
  const { course, loading, error } = useCourseDetail(courseId || '');
  
  const [activeTab, setActiveTab] = useState<'overview' | 'curriculum' | 'instructor' | 'reviews'>('overview');

  useEffect(() => {
    if (!courseId) {
      navigate('/courses');
      return;
    }

    // L∆∞u h√†nh vi xem chi ti·∫øt khi component mount v√† c√≥ course
    if (user && course) {
      courseService.saveUserBehavior(user.id, 'view_detail', courseId);
    }
  }, [courseId, navigate, user, course]);

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="p-8 text-center">
          <CardContent>
            <h2 className="text-2xl font-bold mb-4">C√≥ l·ªói x·∫£y ra</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <Button onClick={() => navigate('/courses')}>
              Quay l·∫°i danh s√°ch kh√≥a h·ªçc
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="p-8 text-center">
          <CardContent>
            <h2 className="text-2xl font-bold mb-4">Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc</h2>
            <p className="text-gray-600 mb-6">Kh√≥a h·ªçc b·∫°n t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
            <Button onClick={() => navigate('/courses')}>
              Quay l·∫°i danh s√°ch kh√≥a h·ªçc
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const isCourseFavorite = isFavorite(course.id);

  const handleFavoriteClick = () => {
    if (isCourseFavorite) {
      removeFromFavorites(course.id);
      if (user) {
        courseService.saveUserBehavior(user.id, 'unfavorite', course.id);
      }
    } else {
      addToFavorites(course);
      if (user) {
        courseService.saveUserBehavior(user.id, 'favorite', course.id);
      }
    }
  };

  const handleEnroll = () => {
    // Logic ƒëƒÉng k√Ω kh√≥a h·ªçc
    if (user) {
      courseService.saveUserBehavior(user.id, 'enroll', course.id);
      alert('ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng! (Demo)');
    } else {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc');
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-100 text-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getLevelText = (level: string) => {
    switch (level) {
      case 'beginner': return 'C∆° b·∫£n';
      case 'intermediate': return 'Trung c·∫•p';
      case 'advanced': return 'N√¢ng cao';
      default: return level;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header v·ªõi n√∫t back */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <Button 
            variant="ghost" 
            onClick={() => navigate(-1)}
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="w-4 h-4" />
            Quay l·∫°i
          </Button>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Course Hero */}
            <Card>
              <CardContent className="p-0">
                <div className="relative">
                  <img
                    src={course.thumbnail}
                    alt={course.title}
                    className="w-full h-64 object-cover rounded-t-lg"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.src = '/images/courses/course1.jpg';
                    }}
                  />
                  {course.isPopular && (
                    <Badge className="absolute top-4 left-4 bg-orange-500 text-white">
                      üî• Ph·ªï bi·∫øn
                    </Badge>
                  )}
                </div>
                
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h1 className="text-3xl font-bold text-gray-900 mb-2">
                        {course.title}
                      </h1>
                      <p className="text-gray-600 text-lg mb-4">
                        {course.description}
                      </p>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleFavoriteClick}
                      className={`ml-4 ${isCourseFavorite ? 'text-red-500 border-red-200' : 'text-gray-500'}`}
                    >
                      <Heart className={`w-4 h-4 ${isCourseFavorite ? 'fill-current' : ''}`} />
                    </Button>
                  </div>

                  {/* Course Meta Info */}
                  <div className="flex flex-wrap items-center gap-4 mb-6">
                    <div className="flex items-center gap-1">
                      <Star className="w-4 h-4 text-yellow-500" />
                      <span className="font-medium">{course.rating}</span>
                      <span className="text-gray-500">({course.reviewCount} ƒë√°nh gi√°)</span>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <User className="w-4 h-4 text-gray-500" />
                      <span className="text-gray-600">{course.instructor}</span>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <Clock className="w-4 h-4 text-gray-500" />
                      <span className="text-gray-600">{formatDuration(course.duration)}</span>
                    </div>
                    
                    <Badge className={getLevelColor(course.level)}>
                      {getLevelText(course.level)}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="flex flex-wrap gap-2">
                    {course.tags.map((tag, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Tabs */}
            <Card>
              <CardHeader>
                <div className="flex border-b">
                  {[
                    { id: 'overview', label: 'T·ªïng quan', icon: BookOpen },
                    { id: 'curriculum', label: 'Ch∆∞∆°ng tr√¨nh h·ªçc', icon: CheckCircle },
                    { id: 'instructor', label: 'Gi·∫£ng vi√™n', icon: User },
                    { id: 'reviews', label: 'ƒê√°nh gi√°', icon: Star }
                  ].map(tab => (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id as any)}
                      className={`flex items-center gap-2 px-4 py-2 border-b-2 transition-colors ${
                        activeTab === tab.id
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      <tab.icon className="w-4 h-4" />
                      {tab.label}
                    </button>
                  ))}
                </div>
              </CardHeader>
              
              <CardContent>
                {activeTab === 'overview' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-xl font-semibold mb-3">M√¥ t·∫£ kh√≥a h·ªçc</h3>
                      <p className="text-gray-700 leading-relaxed">
                        {course.description}
                      </p>
                    </div>
                    
                    <div>
                      <h3 className="text-xl font-semibold mb-3">B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨?</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {[
                          'N·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n',
                          'Th·ª±c h√†nh v·ªõi d·ª± √°n th·ª±c t·∫ø',
                          'Hi·ªÉu s√¢u v·ªÅ best practices',
                          'X√¢y d·ª±ng portfolio chuy√™n nghi·ªáp',
                          'Chu·∫©n b·ªã cho c√¥ng vi·ªác th·ª±c t·∫ø',
                          'H·ªó tr·ª£ t·ª´ c·ªông ƒë·ªìng h·ªçc vi√™n'
                        ].map((item, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <CheckCircle className="w-4 h-4 text-green-500" />
                            <span className="text-gray-700">{item}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'curriculum' && (
                  <div className="space-y-4">
                    <h3 className="text-xl font-semibold">Ch∆∞∆°ng tr√¨nh h·ªçc</h3>
                    {[
                      { title: 'Gi·ªõi thi·ªáu v√† chu·∫©n b·ªã', lessons: 5, duration: 45 },
                      { title: 'Ki·∫øn th·ª©c c∆° b·∫£n', lessons: 8, duration: 120 },
                      { title: 'Th·ª±c h√†nh n√¢ng cao', lessons: 12, duration: 180 },
                      { title: 'D·ª± √°n th·ª±c t·∫ø', lessons: 6, duration: 90 },
                      { title: 'Tri·ªÉn khai v√† t·ªëi ∆∞u', lessons: 4, duration: 60 }
                    ].map((chapter, index) => (
                      <Card key={index} className="border">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium">{chapter.title}</h4>
                              <div className="text-sm text-gray-500 mt-1">
                                {chapter.lessons} b√†i h·ªçc ‚Ä¢ {chapter.duration} ph√∫t
                              </div>
                            </div>
                            <Button variant="ghost" size="sm">
                              <Play className="w-4 h-4" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}

                {activeTab === 'instructor' && (
                  <div className="space-y-6">
                    <div className="flex items-start gap-4">
                      <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-xl font-bold">
                        {course.instructor.charAt(0)}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-xl font-semibold">{course.instructor}</h3>
                        <p className="text-gray-600 mb-2">Senior Developer & Instructor</p>
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <div className="flex items-center gap-1">
                            <Star className="w-4 h-4" />
                            <span>4.8 rating</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Users className="w-4 h-4" />
                            <span>50,000+ h·ªçc vi√™n</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <BookOpen className="w-4 h-4" />
                            <span>25 kh√≥a h·ªçc</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Gi·ªõi thi·ªáu</h4>
                      <p className="text-gray-700">
                        V·ªõi h∆°n 10 nƒÉm kinh nghi·ªám trong ng√†nh ph√°t tri·ªÉn ph·∫ßn m·ªÅm, 
                        {course.instructor} ƒë√£ gi·∫£ng d·∫°y cho h√†ng ngh√¨n h·ªçc vi√™n tr√™n to√†n th·∫ø gi·ªõi.
                        Chuy√™n m√¥n s√¢u v·ªÅ c√°c c√¥ng ngh·ªá web hi·ªán ƒë·∫°i v√† ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y hi·ªáu qu·∫£.
                      </p>
                    </div>
                  </div>
                )}

                {activeTab === 'reviews' && (
                  <div className="space-y-6">
                    <div className="flex items-center gap-6">
                      <div className="text-center">
                        <div className="text-4xl font-bold text-yellow-500">{course.rating}</div>
                        <div className="flex items-center justify-center gap-1 mt-1">
                          {[1, 2, 3, 4, 5].map(star => (
                            <Star 
                              key={star} 
                              className={`w-4 h-4 ${star <= course.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'}`} 
                            />
                          ))}
                        </div>
                        <div className="text-sm text-gray-500 mt-1">{course.reviewCount} ƒë√°nh gi√°</div>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: 'Nguy·ªÖn VƒÉn A', rating: 5, comment: 'Kh√≥a h·ªçc r·∫•t tuy·ªát v·ªùi, gi·∫£ng vi√™n nhi·ªát t√¨nh!' },
                        { name: 'Tr·∫ßn Th·ªã B', rating: 4, comment: 'N·ªôi dung ch·∫•t l∆∞·ª£ng, d·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.' },
                        { name: 'L√™ VƒÉn C', rating: 5, comment: 'ƒê√°ng ƒë·ªìng ti·ªÅn b√°t g·∫°o, recommend cho m·ªçi ng∆∞·ªùi!' }
                      ].map((review, index) => (
                        <Card key={index} className="border">
                          <CardContent className="p-4">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                                {review.name.charAt(0)}
                              </div>
                              <div>
                                <div className="font-medium text-sm">{review.name}</div>
                                <div className="flex items-center gap-1">
                                  {[1, 2, 3, 4, 5].map(star => (
                                    <Star 
                                      key={star} 
                                      className={`w-3 h-3 ${star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'}`} 
                                    />
                                  ))}
                                </div>
                              </div>
                            </div>
                            <p className="text-gray-700 text-sm">{review.comment}</p>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Price & Enroll Card */}
            <Card className="sticky top-4">
              <CardContent className="p-6">
                <div className="text-center mb-6">
                  <div className="flex items-center justify-center gap-2 mb-2">
                    {course.originalPrice && course.originalPrice > course.price && (
                      <span className="text-lg text-gray-500 line-through">
                        {formatPrice(course.originalPrice)}
                      </span>
                    )}
                    <span className="text-3xl font-bold text-blue-600">
                      {formatPrice(course.price)}
                    </span>
                  </div>
                  {course.originalPrice && course.originalPrice > course.price && (
                    <Badge className="bg-red-100 text-red-800">
                      Gi·∫£m {Math.round((1 - course.price / course.originalPrice) * 100)}%
                    </Badge>
                  )}
                </div>

                <Button 
                  onClick={handleEnroll}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-medium mb-3"
                >
                  ƒêƒÉng k√Ω h·ªçc ngay
                </Button>

                <div className="flex gap-2">
                  <Button variant="outline" className="flex-1">
                    <Share2 className="w-4 h-4 mr-2" />
                    Chia s·∫ª
                  </Button>
                  <Button variant="outline" className="flex-1">
                    <Download className="w-4 h-4 mr-2" />
                    T·∫£i xu·ªëng
                  </Button>
                </div>

                <div className="mt-6 space-y-3">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Truy c·∫≠p tr·ªçn ƒë·ªùi</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Ch·ª©ng ch·ªâ ho√†n th√†nh</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>H·ªó tr·ª£ 24/7</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>C·ªông ƒë·ªìng h·ªçc vi√™n</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Course Info */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BookOpen className="w-5 h-5" />
                  Th√¥ng tin kh√≥a h·ªçc
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">Th·ªùi l∆∞·ª£ng:</span>
                  <span className="font-medium">{formatDuration(course.duration)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">C·∫•p ƒë·ªô:</span>
                  <Badge className={getLevelColor(course.level)}>
                    {getLevelText(course.level)}
                  </Badge>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Danh m·ª•c:</span>
                  <span className="font-medium">{course.category}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Ng√¥n ng·ªØ:</span>
                  <div className="flex items-center gap-1">
                    <Globe className="w-4 h-4" />
                    <span className="font-medium">Ti·∫øng Vi·ªát</span>
                  </div>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">C·∫≠p nh·∫≠t:</span>
                  <div className="flex items-center gap-1">
                    <Calendar className="w-4 h-4" />
                    <span className="font-medium">
                      {new Date(course.updatedAt).toLocaleDateString('vi-VN')}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CourseDetailPage;
